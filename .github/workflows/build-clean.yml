name: Build Clean Kernel

on: [workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "whyred_defconfig"
      KERNEL_CMDLINE: "ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=out"
      WORK_PATH: ${{github.workspace}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install gcc-arm-linux-gnueabi -y
          sudo apt install binutils make python3 libssl-dev build-essential bc bison flex libarchive-tools unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs lld -y
          sudo apt-get install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python3-clang -y

          mkdir neutron-clang
          cd neutron-clang
          curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
          chmod +x antman
          ./antman -S=05012024
          export PATH=$WORK_PATH/neutron-clang/bin/:$PATH
          ./antman --patch=glibc
          cd ..

          git clone --single-branch --branch=android-4.4-stable --recurse-submodules --depth 100 https://github.com/herosavx/android_kernel_xiaomi_sdm660_44.git ksource
          cd ksource
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.0
          curl -LSs "https://raw.githubusercontent.com/Poko-Apps/MemKernel/main/kernel/setup.sh" | bash -s M potemi
          cd ..
          mkdir ArtifactsKernel

      - name: Build Kernel
        run: |
          cd ksource
          sed -i 's/# CONFIG_INPUT_QTI_HAPTICS is not set/CONFIG_INPUT_QTI_HAPTICS=y/g' arch/arm64/configs/$KERNEL_DEFCONFIG
          sed -i 's/# CONFIG_MODULES is not set/CONFIG_MODULES=y/' arch/arm64/configs/$KERNEL_DEFCONFIG
          echo -e "\nCONFIG_ASM_MODVERSIONS=y\nCONFIG_MODULE_UNLOAD=y\nCONFIG_MODVERSIONS=y" >> arch/arm64/configs/$KERNEL_DEFCONFIG
          
          make $KERNEL_CMDLINE $KERNEL_DEFCONFIG CC="ccache clang"
          make $KERNEL_CMDLINE CC="ccache clang" -j$(nproc --all)
          cp -rf out/arch/arm64/boot/ ../ArtifactsKernel
          cp -rf out/drivers/memkernel/*_memk.ko ../ArtifactsKernel
          cd ..

      - name: Upload Artifacts-KERNEL
        uses: actions/upload-artifact@v4
        with:
          name: Build-Artifacts
          path: "ArtifactsKernel/*"
